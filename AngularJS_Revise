AngularJS extends HTML attributes with Directives, and binds data to HTML with Expressions.
The ng-app directive defines an AngularJS application
The ng-model directive binds the value of HTML controls (input, select, textarea) to application data.
The ng-bind directive binds application data to the HTML view.
The ng-init directive initializes AngularJS application variables. 
The ngRequired adds the required validator to ngModel. It is most often used for input and select controls 
This directive sets the disabled attribute on the element (typically a form control, e.g. input, button, select etc.) 
if the expression inside ngDisabled evaluates to truthy   //ng-disabled="expression">
AngularJS expressions bind AngularJS data to HTML the same way as the ng-bind directive.
<div ng-app="" ng-init="firstName='John'">
  <p>Name: <input type="text" ng-model="name" ng-required="true" name="inptctrl"></p>
  <button ng-disabled="inptctrl.$invalid">This button is disable when the expression evaluates to true</button>
  <p ng-bind="name"></p> // <p>{{name}}</p>
<p>The name is <span ng-bind="firstName"></span></p>
</div>
----------------------------------------------------------------------------------------------
AngularJS Module:
var app = angular.module('myApp', []); 
AngularJS Controller:
app.controller('myCtrl', function($scope) {
    -------------------
	--------------------
}); 
-------------------------------------------------------------------------------------------------\
Custom directive:
app.directive("myDirective", function() {
    return {
        restrict : "EA",  // "A" for attribute, "E" for element, "C" for class
        template : "<h1>Made by a directive!</h1>"
    };
});

<p myDirective></p> --> As an attribute
<myDirective></myDirective>  ---> As an element
<p class="myDirective"></p>   ---> As a class
--------------------------------------------------------------------------------------------
ng-repeat Directive:
The ngRepeat directive instantiates a template once per item from a collection.
$index  - item index or key.
$first  - true if the repeated element is first in the iterator.
$middle - true if the repeated element is between the first and last in the iterator.
$last   - true if the repeated element is last in the iterator.
$even   - true if the iterator position $index is even
$odd    - true if the iterator position $index is odd
<div ng-app="" ng-init="names=['Jani','Hege','Kai']">
  <ul>
    <li ng-repeat="x in names  track by $index">
      {{ x }}
    </li>
  </ul>
</div>
Iterating over object properties:
<div ng-repeat="(key, value) in myObj"> ... </div>
----------------------------------------------------------------------------------
Form-Controller:
$dirty, $pristine, $touched, $untouched, $valid, $invalid , $error.email, $error.required gives boolean values depending on the status of form controls
ng-dirty, ng-pristine, ng-touched, ng-untouched, ng-valid, ng-invalid classes are activated depending on the status of form controls
<style>
input.ng-dirty.ng-touched{
border: 2px solid red;
}
</style>
<form  name="myForm" ng-model="form" novalidate>
    Email:
    <input type="email" name="myAddress" ng-model="text" ng-required="true" >
    <span ng-show="myForm.myAddress.$dirty">Input control is dirty</span> </br>
	<span ng-show="myForm.myAddress.$pristine">Input control is pristine</span> </br>
	<span ng-show="myForm.myAddress.$touched">Input control is touched</span> </br>
	<span ng-show="myForm.myAddress.$untouched">Input control is untouched</span> </br>
	<span ng-show="myForm.myAddress.$valid">Input control is valid</span> </br>
	<span ng-show="myForm.myAddress.$invalid">Input control is invalid</span> </br>
<span ng-show="myForm.myAddress.$error.email">Input control is not email type</span> </br 
</form>
<button ng-click="setPristine()" ng-disabled="myForm.$invalid">SetPristine</button>


$setPristine();
Sets the control to its pristine state.

$setDirty();
Sets the control to its dirty state.

$setUntouched();
Sets the control to its untouched state.

$setTouched();
Sets the control to its touched state.

app.controller("myController", function($scope){
$scope.value=0;
$scope.setPristine=function(){
	$scope.value=11;
	console.log("Entered");
$scope.myForm.$setPristine();
}

$scope.setTouched=function(){
	$scope.value=34;
	console.log("Entered");
$scope.myForm.$setUntouched();
}

});

Filters:
currency Format a number to a currency format.
<span>{{value | currency: "Rs.": 0}}</span>
//{{ currency_expression | currency : symbol : fractionSize}}

lowercase Format a string to lower case.
<span>{{text | lowercase}}</span>  //{{ lowercase_expression | lowercase}}
uppercase Format a string to upper case.
<span>{{text | uppercase}}</span>  //{{ uppercase_expression | uppercase}}

date Format a date to a specified format.
{{ date_expression | date : format : timezone}}
Date_expression: (e.g. yyyy-MM-ddTHH:mm:ss.sssZ and its shorter versions like yyyy-MM-ddTHH:mmZ, 

yyyy-MM-dd or yyyyMMddTHHmmssZ)
Default format is mediumDate(e.g. Sep 3, 2010)
<span>{{date1 | date:'medium': '+0530'}}</span>  //$scope.date1=new Date();
'medium': equivalent to 'MMM d, y h:mm:ss a' (e.g. Sep 3, 2010 12:05:08 PM)

json converts a javascript object to a JSON string.
{{ javascript_object | json : spacing}}
{{ {'name':'value'} | json:4 }}

number Format a number to a string.
{{ number_expression | number : fractionSize}}

orderBy
{{ orderBy_expression | orderBy : expression : reverse : comparator}}
Default sorting is ascending order, for descending order set 'reverse' to true

limitTo 
Creates a new array or string containing only a specified number of elements. The elements are 

taken from either the beginning or the end of the source array, string or number, as specified 

by the value and sign (positive or negative) of limit
{{ limitTo_expression | limitTo : limit : begin}}
If the limit number is positive, limit number of items from the beginning of the source 

array/string are copied. If the number is negative, limit number of items from the end of the 

source array/string are copied.
begin indicates an offset from the end of input. Defaults to 0.

filter 
Select a subset of items from an array and returns it as a new array.
{{ filter_expression | filter : expression : comparator : anyPropertyKey}}
Eg: 
<input ng-model="searchText"></label>
<tr ng-repeat="friend in friends | filter:searchText">
(or)
<label>Any: <input ng-model="search.$"></label> <br>
<label>Name only <input ng-model="search.name"></label><br>
<label>Phone only <input ng-model="search.phone"></label><br>
<tr ng-repeat="friendObj in friends | filter:search:strict">
