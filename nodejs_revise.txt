What Can Node.js Do?

    Node.js can generate dynamic page content
    Node.js can create, open, read, write, delete, and close files on the server
    Node.js can collect form data
    Node.js can add, delete, modify data in your database

-----------------------------------------------------------------------------------------
Modules are javascript libraries
To include a module, use the require() function with the name of the module:
Eg: var http = require('http');
'http' is a built-in module
----------------------------------------------------------------------------------------
Including custom modules:
To include our own module, attach the methods/arrays/variables/objects created in our module to 'exports' keyword to make them available outside the module file.
Eg: //Here, the "anyObjectcreated", "anyArraycreated" is made available  
exports.data = anyObjectcreated;
exports.array=anyArraycreated;
//Think of it as exports as being an empty object and properties/methods being attached to //it
//or var exports = module.exports={anyObjectcreated,anyArraycreated};
To include and use the module we created(let it be myModule):
var mod = require('./myModule');
----------------------------------------------------------------------------------------
//Import http module
var http = require('http');
//create a server using createServer() method, which listens at port 8080
http.createServer(someFunction).listen(8080);
//The function passed into the http.createServer() method, will be executed when someone tries to access the computer on port 8080(http://localhost:8080) 
function someFunction (req, res) {
    console.log(req.url);
    res.writeHead(200, {'Content-Type': 'text/plain'});//{'Content-Type': 'text/html'}
    res.end('Hello World!');
} 
-----------------------------------------------------------------------------------------
Another built - in module is the 'url' to easily split the web address into readable parts
To include the URL module, use the require() method:
var url = require('url'); 
Parse an address with the url.parse() method, and it will return a URL object with each part of the address as properties:
The properties of the URL object returned are:
Url {
  protocol,slashes,auth,host,port,hostname,hash,search,pathname,path
  href,query(parse the query string and returns an object)
Eg:
var url = require('url');
var adr = 'http://localhost:8080/default.htm?year=2017&month=february';
var q = url.parse(adr, true);
console.log(q);
//returns 
Url {
  protocol: null,
  slashes: null,
  auth: null,
  host: null,
  port: null,
  hostname: null,
  hash: null,
  search: '?year=2017&month=february',
  query: 'year=2017&month=february',
  pathname: '/default.htm',
  path: '/default.htm?year=2017&month=february',
//  href: '/default.htm?year=2017&month=february' }
console.log(q.host); //returns 'localhost:8080'
console.log(q.pathname); //returns '/default.htm'
console.log(q.search); //returns '?year=2017&month=february'
var qdata = q.query; //returns an object: { year: 2017, month: 'february' }
console.log(qdata.month); //returns 'february'

---------------------------------------------------------------------------------------

Until now, features of nodejs as a web server has been mentioned.
Nodejs as a File Server using file system module:
To include the File System module, use the require() method:
var fs = require('fs'); 
Using File System module, we can

Read files - fs.readFile
http.createServer(function (req, res) {
  fs.readFile('demofile1.html', 'utf8', function(err, data) {
    res.writeHead(200, {'Content-Type': 'text/html'});
    res.write(data);
    res.end();
  });
}).listen(8080);

Create files - fs.open()
fs.open('mynewfile2.txt', 'w', function (err, file) {
  if (err) throw err;
  console.log('Saved!');
}); 
//The fs.open() method takes a "flag" as the second argument, if the flag is "w",the //specified file is opened for writing

Update files - fs.appendFile() or fs.writeFile()
//fs.writeFile() method replaces the specified file and content
//fs.appendFile() method appends the specified content at the end of the specified file
fs.appendFile('mynewfile1.txt', ' This is my text.','utf8', function (err) {
  if (err) throw err;
  console.log('Updated!');
}); 

Delete files - fs.unlink()
fs.unlink('mynewfile2.txt', function (err) {
  if (err) throw err;
  console.log('File deleted!');
}); 

Rename files - fs.rename()
fs.rename('mynewfile1.txt', 'myrenamedfile.txt', function (err) {
  if (err) throw err;
  console.log('File Renamed!');
});     
    
---------------------------------------------------------------------------------------
NPM:
A package in Node.js contains all the files you need for a module.
Modules are JavaScript libraries you can include in your project.
To install a package using npm, enter following in the cmnd prompt:
npm install upper-case
and include it using require keyword
var uc = require('upper-case');
-----------------------------------------------------------------------------------------
Every action on a computer is an event. Like when a connection is made or a file is opened.
Node.js have a built-in module, called "events", where you can create-, fire-, and listen for- your own events.
All event properties and methods are an instance of an EventEmitter object. To be able to access these properties and methods, create an EventEmitter object:
var events = require('events');
var eventEmitter = new events.EventEmitter(); 
//Create an event handler:
var myEventHandler = function () {
  console.log('I hear a scream!');
}
//Assign the event handler to an event:
eventEmitter.on('scream', myEventHandler);
//To fire an event, use the emit() method.
//Fire the 'scream' event:
eventEmitter.emit('scream');

Objects in Node.js can fire events, like the readStream object fires events when opening and closing a file:
var rs = fs.createReadStream('./demofile.txt');
rs.on('open', function () {
  console.log('The file is open');
}); 

Summary:
Create a eventhandler
Assign the eventhandler to the event(on())
Fire the event(emit())
-----------------------------------------------------------------------------------------
The Formidable Module:Module for working with file uploads, called "Formidable".
npm install formidable
var formidable = require('formidable'); 

Steps:
1)Create an instance of IncomingForm object
var form = new formidable.IncomingForm();
2) Parse the Uploaded File
form.parse(req, function (err, fields, files) {
      res.write('File uploaded');
      res.end();
    });
3) Save the File in desired location

----------------------------------------------------------------------------------------

Nodemailer module:
The Nodemailer module makes it easy to send emails from your computer.
npm install nodemailer
var nodemailer = require('nodemailer'); 
var transporter = nodemailer.createTransport({
  service: 'gmail',
  auth: {
    user: 'youremail@gmail.com',
    pass: 'yourpassword'
  }
});

var mailOptions = {
  from: 'youremail@gmail.com',
  to: 'myfriend@yahoo.com',myfriend@yahoo.com, myotherfriend@yahoo.com',
  subject: 'Sending Email using Node.js',
  text: 'That was easy!' 
//(or)html: '<h1>Welcome</h1><p>That was easy!</p>'
};

transporter.sendMail(mailOptions, function(error, info){
  if (error) {
    console.log(error);
  } else {
    console.log('Email sent: ' + info.response);
  }
}); 
















